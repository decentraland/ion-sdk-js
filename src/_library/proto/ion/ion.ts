/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: proto/ion/ion.proto
 * git: https://github.com/thesayyn/protoc-gen-ts
 * buymeacoffee: https://www.buymeacoffee.com/thesayyn
 *  */
import * as pb_1 from "google-protobuf";
export namespace ion {
    export class Empty extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Empty {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Empty();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Empty {
            return Empty.deserialize(bytes);
        }
    }
    export class RPC extends pb_1.Message {
        constructor(data?: any[] | {
            protocol?: string;
            addr?: string;
            params?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("protocol" in data && data.protocol != undefined) {
                    this.protocol = data.protocol;
                }
                if ("addr" in data && data.addr != undefined) {
                    this.addr = data.addr;
                }
                if ("params" in data && data.params != undefined) {
                    this.params = data.params;
                }
            }
            if (!this.params)
                this.params = new Map()
        }
        get protocol() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set protocol(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get addr() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set addr(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get params() {
            return pb_1.Message.getField(this, 3) as any as Map<string, string>;
        }
        set params(value: Map<string, string>) {
            pb_1.Message.setField(this, 3, value as any);
        }
        toObject() {
            const data: {
                protocol?: string;
                addr?: string;
                params?: {
                    [key: string]: string;
                };
            } = {};
            if (this.protocol != null) {
                data.protocol = this.protocol;
            }
            if (this.addr != null) {
                data.addr = this.addr;
            }
            if (this.params.size > 0) {
                data.params = Object.fromEntries(this.params);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.protocol === "string" && this.protocol.length)
                writer.writeString(1, this.protocol);
            if (typeof this.addr === "string" && this.addr.length)
                writer.writeString(2, this.addr);
            for (const [key, value] of this.params) {
                writer.writeMessage(3, this.params, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                })
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RPC {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RPC();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.protocol = reader.readString();
                        break;
                    case 2:
                        message.addr = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message, () => (pb_1.Map as any).deserializeBinary(message.params, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RPC {
            return RPC.deserialize(bytes);
        }
    }
    export class Node extends pb_1.Message {
        constructor(data?: any[] | {
            dc?: string;
            nid?: string;
            service?: string;
            rpc?: RPC;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("dc" in data && data.dc != undefined) {
                    this.dc = data.dc;
                }
                if ("nid" in data && data.nid != undefined) {
                    this.nid = data.nid;
                }
                if ("service" in data && data.service != undefined) {
                    this.service = data.service;
                }
                if ("rpc" in data && data.rpc != undefined) {
                    this.rpc = data.rpc;
                }
            }
        }
        get dc() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set dc(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get nid() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set nid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get service() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set service(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get rpc() {
            return pb_1.Message.getWrapperField(this, RPC, 4) as RPC;
        }
        set rpc(value: RPC) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        toObject() {
            const data: {
                dc?: string;
                nid?: string;
                service?: string;
                rpc?: ReturnType<typeof RPC.prototype.toObject>;
            } = {};
            if (this.dc != null) {
                data.dc = this.dc;
            }
            if (this.nid != null) {
                data.nid = this.nid;
            }
            if (this.service != null) {
                data.service = this.service;
            }
            if (this.rpc != null) {
                data.rpc = this.rpc.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.dc === "string" && this.dc.length)
                writer.writeString(1, this.dc);
            if (typeof this.nid === "string" && this.nid.length)
                writer.writeString(2, this.nid);
            if (typeof this.service === "string" && this.service.length)
                writer.writeString(3, this.service);
            if (this.rpc !== undefined)
                writer.writeMessage(4, this.rpc, () => this.rpc.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Node {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Node();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.dc = reader.readString();
                        break;
                    case 2:
                        message.nid = reader.readString();
                        break;
                    case 3:
                        message.service = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.rpc, () => message.rpc = RPC.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Node {
            return Node.deserialize(bytes);
        }
    }
}
